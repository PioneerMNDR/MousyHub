@using MousyHub.Components.Models
@using MousyHub.Components.Models.Misc
@using MousyHub.Components.Models.Services
@using MousyHub.Components.Models.User
@inject IJSRuntime JSRuntime
@inject SettingsService Settings
@inject ProviderService Provider
@inject ChatState State
@inject AlertServices Alerts
@inject TranslatorService Translator;




@if (isLoaded == false)
{
    <MudAnimate Selector=".anim1" AnimationType="AnimationType.SlideY" AnimationTiming=AnimationTiming.Ease Value="0" Paused=isLoaded ValueSecondary=1000 Duration="0.6" Infinite=false>
    </MudAnimate>

}
<MudAnimate Selector=".micanim" AnimationType="AnimationType.Scale" AnimationTiming=AnimationTiming.Linear Value="1" ValueSecondary=0.7 AnimationDirection="AnimationDirection.Alternate" Duration="0.5" Infinite=true>
</MudAnimate>
<MudPopover Open="isOpenAvatar" OverflowBehavior="OverflowBehavior.FlipNever" Fixed AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight">

     <MudImage ObjectFit="ObjectFit.Fill" Height="450" @onclick="@(()=>ToggleAvatar(AvatarUrl))" Src="@($"data:image/png;base64,{AvatarUrl}")"></MudImage>
 </MudPopover>



 @if (ChatHistory != null)
{
    <MudPaper Style="display:flex;flex-direction:column;height:86vh;" Class="anim1">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-2 pb-2" id="chat" Style="flex-grow:1;overflow-y:auto;">
            <div>
                @foreach (var message in ChatHistory.Messages)
                {

                    <ChatMessageComponent ClickAvatar="ToggleAvatar" DeleteEvent=DeleteMessage Message="message" isChatPageLoaded=isLoaded NextFirstMessageEvent="NextFirstMessage"></ChatMessageComponent>
                }

            </div>
        </MudContainer>
        @if (Provider.Status)
        {
            @if (FastAnswers.Count > 0)
            {
                <MudStack Row Justify="Justify.Center" StretchItems="StretchItems.All" Class="mx-4 mb-2">
                     @for (int i = 0; i < Math.Min(FastAnswers.Count, 3); i++)
                    {
                        int n = i;
                        <MudButton IconColor="Settings.User.QuickRepliesSetings[n].MudColor" StartIcon="@Icons.Material.Filled.Brightness1" Class="QuickReplyClass" Variant="Variant.Outlined" Color="Color.Default" OnClick="@(()=>EnterFastAnswer(FastAnswers[n]))">@FastAnswers[n]</MudButton>
                    }
                </MudStack>

            }


            <MudTextFieldExtended OnKeyUp="EnterEvent" OnKeyDown="DeleteNewlineOnEnterEvent"  @ref=mudText Clearable @bind-Value="CurrentMessage" Immediate Variant="Variant.Outlined" Lines="2" Class="chatEnterTab">
                 <AdornmentStart>
                     <MudMenu Disabled=@(isGenerating || isBusy) Icon="@Icons.Material.Filled.Menu">
                         <MudMenuItem Icon="@Icons.Material.Filled.Quickreply" OnClick="QuickReplyGenerate" title="Generate quick reply on the last message">Quick reply</MudMenuItem>
                         <MudMenuItem Icon="@Icons.Material.Filled.Sync" OnClick="()=>ClickRegenerate.InvokeAsync(State.ChatHistory.GetLastMessage().Owner)">Regenerate</MudMenuItem>
                         <MudMenuItem Icon="@Icons.Material.Filled.AddComment" OnClick="()=>ClickContinueGenerate.InvokeAsync(State.ChatHistory.GetLastMessage())">Continue</MudMenuItem>
                     </MudMenu>
                 </AdornmentStart>
                 <AdornmentEnd>
                     <div class="me-3">
                         @if (isBusy)
                        {
                            <MudAnimate Selector=".animbusy" AnimationTiming=AnimationTiming.Linear Value="0" Paused=false ValueSecondary=1000 Duration="2" AnimationType="AnimationType.Rotate" Infinite>
                 </MudAnimate>

                            <MudTooltip Text="The model is occupied with other process">
                                <MudIcon Class="animbusy" Color=Color.Error Icon="@Icons.Material.Filled.Cyclone"></MudIcon>
                            </MudTooltip>


                        }
                        else if (isVisibleUnpauseButton)
                        {
                            <MudIconButton OnClick="@(()=>{ClickSend.InvokeAsync(State.NextPerson);isVisibleUnpauseButtonChanged.InvokeAsync(false);})" Title="Next generation" Color=Color.Info Icon="@Icons.Material.Filled.PlayCircle"></MudIconButton>
                        }
                        else if (isGenerating)
                        {
                            <MudIconButton OnClick="@(async()=>await AbortCallback.InvokeAsync())" Color=Color.Error Icon="@Icons.Material.Filled.Stop"></MudIconButton>
                        }
                        else
                        {
                            <MudIconButton OnClick="SendMessage" Color=Color.Info Icon="@Icons.Material.Filled.Send"></MudIconButton>
                            if (Provider.STT.isRecord == false && Settings.User.VoskOptions.isEnabled && Provider.STT.isVoskExist)
                            {
                                <MudIconButton OnClick="Provider.STT.Record" Color=Color.Info Icon="@Icons.Material.Filled.Mic"></MudIconButton>
                            }                          
                            if (Provider.STT.isRecord)
                            {
                                <MudIconButton Class="micanim" OnClick="TTS" Variant="Variant.Filled" Color=Color.Error Icon="@Icons.Material.Filled.MicOff"></MudIconButton>
                            }
                          
                        }
                    </div>
                </AdornmentEnd>
            </MudTextFieldExtended>
        }
        else
        {
            <MudAlert Severity="Severity.Error">No connection</MudAlert>
        }
    </MudPaper>

}





@code {
    //for animation
    public bool isLoaded { get; set; }


    [Parameter]
    public ChatHistory? ChatHistory { get; set; }
    [Parameter]
    public string CurrentMessage { get; set; } = "";
    [Parameter]
    public bool isGenerating { get; set; }
    [Parameter]
    public EventCallback<bool> isGeneratingChanged { get; set; }
    [Parameter]
    public EventCallback AbortCallback { get; set; }
    [Parameter]
    public EventCallback<string> CurrentMessageChanged { get; set; }
    [Parameter]
    public EventCallback<Person> ClickSend { get; set; }
    [Parameter]
    public EventCallback<Person> ClickRegenerate { get; set; }
    [Parameter]
    public EventCallback<Message> ClickContinueGenerate { get; set; }
    [Parameter]
    public bool isVisibleUnpauseButton { get; set; }
    [Parameter]
    public bool isBusy { get; set; }
    [Parameter]
    public EventCallback<bool> isVisibleUnpauseButtonChanged { get; set; }

    public List<string> FastAnswers { get; set; } = new List<string>();

    bool isOpenAvatar = false;
    string AvatarUrl = "";

    [CascadingParameter]
    public Main Main { get; set; }

    MudTextFieldExtended<string> mudText;
    private async Task SendMessage()
    {
        Person CurrentPerson = ChatHistory.GetCurrentSpeakerInQueue();
        Person NextPerson = ChatHistory.QueueMoveOrder();
        if (CurrentPerson.IsUser==false)
        {
            Alerts.ErrorAlert("Error building queue. Write to the developer about this error");
        }
        if (!string.IsNullOrWhiteSpace(CurrentMessage) && isGenerating == false)
        {
            var nativeLangContent = CurrentMessage;
            string llmContent = CurrentMessage;
            await ClearMessage();
            if (Translator.isEnabled)
                llmContent = await Translator.TranslateForLLM(llmContent);
            var mes = await ChatHistory.AddMessage(llmContent, CurrentPerson, Settings.CurrentInstruct, nativeLangContent);
            StateHasChanged();
            _ = ClickSend.InvokeAsync(NextPerson);
            FastAnswers.Clear();

        }

    }

    private async Task DeleteMessage(Message message)
    {
        await ChatHistory.DeleteMessage(message);
        StateHasChanged();
    }

    async Task ClearMessage()
    {
        await mudText.Clear();
        StateHasChanged();
    }
    async Task NextFirstMessage()
    {
        ChatHistory.NextFirstMessage();
        if (string.IsNullOrEmpty(ChatHistory.Messages.First().UserNativeLanguageContent))
        {
            await ChatHistory.Messages.First().TranslateMessage(Translator);
        }
        StateHasChanged();
    }

    private void ToggleAvatar(string avatar_url)
    {
        AvatarUrl = avatar_url;
        isOpenAvatar = !isOpenAvatar;
        StateHasChanged();
    }

    async Task EnterEvent(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" && e.ShiftKey == false && !string.IsNullOrWhiteSpace(CurrentMessage))
        {
            await ClearMessage();
        }
    }
    async Task DeleteNewlineOnEnterEvent(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" && e.ShiftKey == false && !string.IsNullOrWhiteSpace(CurrentMessage))
        {
            CurrentMessage = CurrentMessage.TrimEnd('\n');
            await  SendMessage();
            await ClearMessage();
            await mudText.SetText("");
            StateHasChanged();

        }
    }

    async Task QuickReplyGenerate()
    {
        var stringResp = await State.AnswerAssistant();
        FastAnswers = Util.ExtractFastAnswers(stringResp).ToList();
        StateHasChanged();
    }
    void EnterFastAnswer(string answer)
    {
        FastAnswers.Clear();
        CurrentMessage = answer;
        StateHasChanged();
    }
    async Task TTS()
    {
      string result =  await Provider.STT.StopRecording();
        CurrentMessage = result;
        StateHasChanged();

    }
    public void FillTextField(string textToField)
    {
        CurrentMessage += textToField;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        isLoaded = true;
    }
    protected override void OnAfterRender(bool firstRender)
    {





    }

}
