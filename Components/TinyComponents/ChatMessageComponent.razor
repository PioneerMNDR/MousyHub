@using MousyHub.Models
@using MousyHub.Models.Services
@using MousyHub.Components.Pages
@inject ChatState Chat
@inject SettingsService Settings
@inject TranslatorService Translator
@inject IJSRuntime JSRuntime
@if (Message.Content != null && Message.Content != "")
{
    <MudAnimate Selector=".mes1" AnimationType="AnimationType.Scale" AnimationTiming="AnimationTiming.Ease" Value=1 Duration="0.2" Infinite=false>

    </MudAnimate>
    <MudGrid Class="mt-1 mes1" Spacing="0">
        <MudItem md="1" xs="2">
            <MudAvatar Class="mt-2" Size="@(Main.isMobile ? Size.Medium :Size.Large)" Elevation="2" Rounded="Settings.User.SquareAvatars">
                @{
                    var imageSrc = Convert.ToBase64String(Message.Owner.Avatar);
                }
                <MudImage @onclick="@(()=>ClickAvatar.InvokeAsync(imageSrc))" Fluid Src="@($"data:image/png;base64,{imageSrc}")"></MudImage>
             </MudAvatar>
         </MudItem>
         <MudItem md="11" xs="10">
             <div class="d-flex align-center">
                 <MudText Color="Color.Tertiary">@Message.Owner.Name</MudText>
                    <span class="me-2"> </span>
                    <MudText Typo="Typo.body2">@Message.dateTimeString</MudText>
                    <span class="me-2"> </span>
                    @if (Message.isSummarized)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CleaningServices" Color="Color.Default" Size="Size.Small" Title="This messages is optimized(summarized)"></MudIcon>
                }
                <div style="margin-left:auto">
                    <MudStack Row Justify="Justify.FlexEnd" Spacing="0">
                         <MudIconButton Size="Size.Small" OnClick="@(()=>{isEditing=true;Oldmessage=Message;})" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                         <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=>{DeleteEvent.InvokeAsync(Message);})"></MudIconButton>
                         @if (Chat.ChatHistory.Messages.First() == Message && Chat.ChatHistory.Alt_greetings != null && Chat.ChatHistory.Alt_greetings.Length > 0)
                        {
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.NextPlan" OnClick="@(()=>NextFirstMessageEvent.InvokeAsync())" title="Alternative message"></MudIconButton>
                        }

                    </MudStack>
                </div>
            </div>

            @{
                string cssClass = "messageElement mud-elevation-3 ";
                if (Message.isGenerating)
                {
                    cssClass += "generationMessage";
                }
            }
            <MudPaper Elevation="0" Outlined Class="@cssClass">
                 @if (isEditing)
                {
                    <MudTextField Variant="Variant.Filled" Label="Editing message" AutoGrow Value="Message.Content" ValueChanged="@((string newContent)=>UpdateEditingMessage(Message,newContent))">

                     </MudTextField>
                    <MudStack Row Justify="Justify.FlexEnd" Spacing="0">
                         <MudIconButton Size="Size.Small" Color="Color.Error" OnClick="@(()=>{isEditing=false;Message=Oldmessage;})" Icon="@Icons.Material.Outlined.Cancel"></MudIconButton>
                         <MudIconButton Size="Size.Small" Color="Color.Success" OnClick="@(()=>{isEditing=false;_=SaveMessage();})" Icon="@Icons.Material.Filled.Save"></MudIconButton>
                     </MudStack>
                }
                else
                {
                    <div class="MarkdownFormatting">
                        @if (Message.UserNativeLanguageContent != "" && Message.UserNativeLanguageContent != null && Message.isGenerating == false)
                        {
                            <MudMarkdown CodeBlockTheme="CodeBlockTheme.DraculaBase16" Value="@Message.UserNativeLanguageContent"></MudMarkdown>
                        }
                        else
                        {
                            <MudMarkdown CodeBlockTheme="CodeBlockTheme.DraculaBase16" Value="@Message.Content"></MudMarkdown>
                        }

                    </div>
                }
            </MudPaper>

        </MudItem>

    </MudGrid>
}

@code {
    //for animation
    [Parameter]
    public bool isChatPageLoaded { get; set; }

    bool isEditing = false;


    [CascadingParameter]
    public Main Main { get; set; }
    [Parameter]
    public Message Message { get; set; }

    public Message Oldmessage { get; set; }

    [Parameter]
    public EventCallback<Message> DeleteEvent { get; set; }
    [Parameter]
    public EventCallback<string> ClickAvatar { get; set; }
    [Parameter]
    public EventCallback NextFirstMessageEvent { get; set; }

    private bool isEdited = false;

    private void UpdateEditingMessage(Message message, string newContent)
    {
        if (message.Owner.IsUser)
        {
            message.InstructContent = message.InstructContent.Replace(message.Content, newContent);
        }
        message.Content = newContent;
        isEdited = true;
    }
    private async Task SaveMessage()
    {

        //Do not translate if the message has not changed in any way
        if (isEdited)
        {
            await Message.TranslateMessage(Translator);
        }
        StateHasChanged();
        isEdited = false;
    }
}
